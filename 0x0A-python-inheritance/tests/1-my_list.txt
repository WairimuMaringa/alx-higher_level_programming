=======================
How to use 1-my_list.py
======================

Importing function from the module:
	>>> MyList = __import__('1-my_list').MyList


Simple tests

Printing an empty list
	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

Printing a sorted list containing one number
	>>> my_list = MyList()
	>>> my_list += [3]
	>>> my_list.print_sorted()
	[3]

Printing a sorted list containing repeated numbers
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list += [1]
	>>> my_list.append(2)
	>>> my_list.append(2)
	>>> my_list += [2]
	>>> my_list.print_sorted()
	[1, 1, 2, 2, 2]

Printing a sorted list of positive numbers
	>>> my_list = MyList()
	>>> my_list += [0]
	>>> my_list.append(4)
	>>> my_list.append(1)
	>>> my_list.append(10)
	>>> my_list.append(3)
	>>> my_list.append(7)
	>>> my_list.print_sorted()
	[0, 1, 3, 4, 7, 10]

Printing a srted list of positive and negative numbers
	>>> my_list = MyList()
	>>> my_list.append(-5)
	>>> my_list += [5]
	>>> my_list += [4]
	>>> my_list.append(0)
	>>> my_list.append(-4)
	>>> my_list.append(1)
	>>> my_list += [-1]
	>>> my_list.print_sorted()
	[-5, -4, -1, 0, 1, 4, 5]

MyList is an instance of the class list
	>>> my_list = MyList()
	>>> isinstance(my_list, list)
	True

Instance has the correct type
	>>> my_list = MyList()
	>>> type(my_list) == MyList
	True

Check if print_sorted() returns a new sorted list
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> print(my_list)
	[1, 4, 2, 3, 5]

Error tests

	>>> my_list = MyList()
	>>> my_list.print_sorted([1, 3, 5, 4, 2])
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given

	>>> MyList.print_sorted()
	Traceback (most recent call last):
	...
	TypeError: print_sorted() missing 1 required positional argument: 'self'
